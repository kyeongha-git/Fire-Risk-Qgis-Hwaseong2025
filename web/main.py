# -*- coding: utf-8 -*-
#!/usr/bin/env python
# coding: utf-8

# # leafmap, streamlit, folium 업그레이드

# # 웹사이트 구현 (main.py)

# In[1]:


with open("app.py", "w", encoding = "utf-8") as f : 
    f.write('''from folium.features import JsCode\nimport streamlit as st\nimport folium\nimport geopandas as gpd\nfrom folium.features import DivIcon\nfrom streamlit_folium import st_folium\nimport json\nimport pandas as pd\nfrom openai import OpenAI\n\nst.set_page_config(\n    page_title="산업단지 화재 위험도 맵",\n    page_icon="🔥",\n    layout="wide",\n    initial_sidebar_state="expanded"\n)\n\n# --- OpenAI API 키 직접 입력 및 클라이언트 생성 ---\nclient = OpenAI(api_key="my_key")  # ← 본인 키 입력\n\n# ---- 산업단지 및 파일 매핑 ----\nindustrial_areas = {\n    "발안일반산업단지": {\n        "geojson": "Data/발안산업단지_최종스코어링_결과.geojson",\n        "csv": "Data/발안산업단지.csv",\n        "buffer_geojson": "Data/발안_젤위험_버퍼600.geojson"\n    },\n    "향남제약일반산업단지": {\n        "geojson": "Data/향남산업단지_최종스코어링_결과.geojson",\n        "csv": "Data/향남제약산업단지111.csv",\n        "buffer_geojson": "Data/향남_젤위험_버퍼600.geojson"\n    },\n    "동탄도시첨단산업단지": {\n        "geojson": "Data/동탄도시첨단산업단지_최종스코어링_결과.geojson",\n        "csv": "Data/동탄도시첨단산업단지111.csv",\n        "buffer_geojson": "Data/동도첨_젤위험_버퍼600.geojson"\n    }\n}\n\n# ---- ChatGPT 산업단지 요약 함수 (캐싱 적용) ----\n@st.cache_data(show_spinner=False)\ndef get_area_summary_cached(area_name, csv_path):\n    try:\n        df = pd.read_csv(csv_path, encoding="utf-8")\n        sample = df.to_string(index=False)\n        prompt = f"""\n당신은 산업단지의 위험도를 분석하는 데이터 분석가입니다.\n\n아래는 {area_name}의 화재 위험요인 데이터입니다. 이는 각 구역별로 id가 있으며, 화재 위험 요인 feature별 화재 위험 수준 값이 있습니다.\n{sample}\n\n위 데이터의 feature는 화재 위험도를 평가하는 요소이며, 값은 feature의 개수가 아닌 화재 위험 수준입니다. 이는 숫자가 높을수록 위험하며, 낮을 수록 안전합니다.\n\n우리에게는 세 가지 예산 별 대책이 존재합니다.\n저예산은 기본 교육, 소방시설 점검, 현장 컨설팅이 기본적인 방안이며 우리가 제안하고자 하는 방안은 AI CCTV 설치, 화재 알림 경보 시스템이고 적용 예시로는 소규모 공장, 취약사업장 중심에 적용하는 것이 있습니다.\n중간 예산으로는 위험요인 식별, 소방 훈련, 용수시설 확충, 예방강화지구 지정이 기본적인 방안이며 우리가 제안하고자 하는 방안은 화재 예측 모델 도입, AI 기반 실시간 화재 감지가 있고 적용 예시로는 표준 산업단지, 업종별 맞춤 관리가 있습니다.\n고예산으로는 첨단예측&대응, 대규모 인프라, 통합관제, 특수시설 구축이 기본적인 방안이며 우리가 제안하고자 하는 방안은 AI 통합 화재 모니터링 센터 구축, 스마트 화재대응 플랫폼이 있고 적용 예시로는 국가산단, 대형화재 및 복합재난 대응이 있습니다.\n\n따라서, 우리는 해당 산업단지가 종합적으로 어느정도 화재 위험도를 가지는지 판별하여 해당 산업단지에 예산 투입 수준을 판단하고 대응 방안을 제안합니다.\n1. {area_name}의 화재 위험요인과 방재 취약 요소를 판단하고 제시합니다.\n2. 어떤 예산 도입 (저/중/고)이 필요한지 판별 후 위 대응책과 매치하여 AI/스마트 대응방안 및 적용 예시를 제안합니다. \n각 결과는 전문성이 있는 글이어야 하며, 판단 이유가 타당해야 합니다. 각 결과는 1~2줄로 요약해주세요.\n\n예시) 발안산업단지를 분석한다. -> 우리 데이터를 확인하여 분석 요약 및 위험 요인과 방재 취약 요소 파악 후, 어떤 수준의 대응이 필요한지 설명 및 대응 방안 제시.\n🔶 발안산업단지\n분석 요약: 위험물 취급 시설, 고밀도 건물 등이 다수 존재하며, 소방차 접근성과 소방서 거리 등 방재 여건이 매우 열악함.\n\n위험 요인: 위험물회사 밀집, 건물밀도 높음\n\n방재 취약 요소: 소방차 접근 불가, 소방서 원거리\n\n적용 대응책:\n👉 중간 예산 수준 대응 필요\n\n주요 대책: 위험요인 선별, 소방훈련 강화, 용수시설 추가\n\nAI 방안: 화재 예측 모델 및 실시간 경고 시스템\n\n적용 예시: 표준 산업단지 중 위험구역 우선 조치\n"""\n        response = client.chat.completions.create(\n            model="gpt-4o-mini",\n            messages=[{"role": "user", "content": prompt}],\n            max_tokens=600,\n            temperature=0.7\n        )\n        summary = response.choices[0].message.content.strip()\n        return summary\n    except Exception as e:\n        return f"요약 생성 오류: {e}"\n\nwith st.sidebar:\n    st.header("📂 산업단지 선택")\n    selected_area = st.selectbox("산업단지", list(industrial_areas.keys()))\n    use_color = st.checkbox("화재 위험도 5클래스 색상 및 텍스트 표시", value=True)\n    show_buffer = st.checkbox("버퍼 분석 레이어 표시", value=False)\n\n    legend_html = \'\'\'\n<div style="background-color: #222; color: #fff; border: 2px solid #444; border-radius: 8px; padding: 14px 14px 10px 14px; margin-bottom: 18px; margin-top:10px; font-size: 15px; font-weight: 500; letter-spacing: 0.5px;">\n<b style="color:#fff;">화재 위험도 색상 범례</b><br>\n<div style=\'background:#ffffff; color:#111; width: 20px; height: 20px; display: inline-block; border: 1px solid #999; margin-right: 8px; vertical-align:middle;\'></div> <span style="color:#fff;">매우 낮음</span><br>\n<div style=\'background:#ffcccc; color:#111; width: 20px; height: 20px; display: inline-block; border: 1px solid #999; margin-right: 8px; vertical-align:middle;\'></div> <span style="color:#fff;">낮음</span><br>\n<div style=\'background:#ff9999; color:#111; width: 20px; height: 20px; display: inline-block; border: 1px solid #999; margin-right: 8px; vertical-align:middle;\'></div> <span style="color:#fff;">보통</span><br>\n<div style=\'background:#ff6666; color:#111; width: 20px; height: 20px; display: inline-block; border: 1px solid #999; margin-right: 8px; vertical-align:middle;\'></div> <span style="color:#fff;">높음</span><br>\n<div style=\'background:#ff0000; color:#fff; width: 20px; height: 20px; display: inline-block; border: 1px solid #999; margin-right: 8px; vertical-align:middle;\'></div> <span style="color:#fff;">매우 높음</span>\n</div>\n\'\'\'\n    st.markdown(legend_html, unsafe_allow_html=True)\n    \n    st.markdown("---")\n    # ChatGPT 자동 요약 생성 및 박스 표시 (캐시 활용)\n    with st.spinner(f"{selected_area} AI 요약 생성 중..."):\n        summary = get_area_summary_cached(selected_area, industrial_areas[selected_area]["csv"])\n    st.markdown(\n        f"""\n        <div style="background-color:#222; color:#fff; border-radius:10px; padding:16px; margin-top:10px; margin-bottom:10px;">\n        <b>📋 {selected_area} 화재 위험도 분석 및 대응 방안</b><br>\n        {summary.replace(\'\\n\', \'<br>\')}\n        </div>\n        """,\n        unsafe_allow_html=True\n    )\n    st.markdown("---")\n    st.markdown("#### 🖱️ 지도 조작 안내")\n    st.markdown("""\n- 마우스 휠로 확대/축소  \n- 드래그로 이동  \n- 범례와 수치는 위험도 등급입니다.\n""")\n    \ngeojson_path = industrial_areas[selected_area]["geojson"]\ncsv_path = industrial_areas[selected_area]["csv"]\nbuffer_geojson_path = industrial_areas[selected_area]["buffer_geojson"]\n\n# ---- GeoJSON의 마지막 속성 열 이름 추출 ----\nwith open(geojson_path, encoding="utf-8") as f:\n    gj = json.load(f)\n    property_keys = list(gj["features"][0]["properties"].keys())\n    last_property_col = property_keys[-1]\n\n# ---- 색상 기준 함수 ----\ndef get_color_balan(value):\n    try: value = float(value)\n    except: return "#cccccc"\n    if -0.3 < value <= -0.15: return "#ffffff"\n    elif -0.15 < value <= 0.25: return "#ffcccc"\n    elif 0.25 < value <= 1.2: return "#ff9999"\n    elif 1.2 < value <= 1.95: return "#ff6666"\n    elif 1.95 < value <= 2.35: return "#ff0000"\n    else: return "#cccccc"\n\ndef get_color_hyangnam(value):\n    try: value = float(value)\n    except: return "#cccccc"\n    if 0.4 < value <= 0.4: return "#ffffff"\n    elif 0.4 < value <= 0.7: return "#ffcccc"\n    elif 0.7 < value <= 1.0: return "#ff9999"\n    elif 1.0 < value <= 2.3: return "#ff6666"\n    elif 2.3 < value <= 2.6: return "#ff0000"\n    else: return "#cccccc"\n\ndef get_color_dongtan(value):\n    try: value = float(value)\n    except: return "#cccccc"\n    if 0.0 < value <= 0.4: return "#ffffff"\n    elif 0.4 < value <= 1.25: return "#ff9999"\n    elif 1.25 < value <= 2.0: return "#ff6666"\n    elif 2.0 < value <= 2.3: return "#ff0000"\n    else: return "#cccccc"\n\nif selected_area == "발안일반산업단지":\n    get_color = get_color_balan\nelif selected_area == "향남제약일반산업단지":\n    get_color = get_color_hyangnam\nelif selected_area == "동탄도시첨단산업단지":\n    get_color = get_color_dongtan\n\n# ---- 메인 본문 ----\nst.markdown("<h1 style=\'text-align:center; margin-bottom:1.5rem;\'>📊 산업단지 화재 위험도 맵</h1>", unsafe_allow_html=True)\nst.markdown(f"""\n<div style=\'text-align:center; font-size:1.1rem; margin-bottom:1.5rem;\'>\n선택한 산업단지의 화재 위험도 등급을 위성지도와 함께 한눈에 제공합니다.<br>\n위험도 수치는 각 구역별로 지도에 표시되며, 분석 결과는 좌측에서 확인하세요.<br>\n</div>\n""", unsafe_allow_html=True)\n\n# ---- GeoJSON 데이터 읽기 및 좌표계 변환 ----\ntry:\n    gdf = gpd.read_file(geojson_path)\n    if gdf.crs is not None and gdf.crs.to_string() != "EPSG:4326":\n        gdf = gdf.to_crs(epsg=4326)\nexcept Exception as e:\n    st.error(f"GeoJSON 파일을 읽는 중 오류 발생: {e}")\n    st.stop()\n\ncenter = [gdf.geometry.centroid.y.mean(), gdf.geometry.centroid.x.mean()]\nm = folium.Map(location=center, zoom_start=11)\nfolium.TileLayer(\n    tiles="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",\n    attr="Tiles © Esri",\n    name="Esri World Imagery",\n    overlay=False,\n    control=True\n).add_to(m)\n\n# ---- 스타일 함수 ----\ndef style_callback(feature):\n    value = feature["properties"].get(last_property_col)\n    try: value = float(value)\n    except: return {"color": "black", "weight": 1, "fillColor": "#cccccc", "fillOpacity": 0.1}\n    color = get_color(value)\n    return {"color": "black", "weight": 1, "fillColor": color, "fillOpacity": 0.7}\n\ndef no_style_callback(feature):\n    return {"color": "black", "weight": 1, "fillColor": "#cccccc", "fillOpacity": 0.4}\n\nstyle_func = style_callback if use_color else no_style_callback\n\nlayer = folium.GeoJson(\n    data=gdf.to_json(),\n    name="산업단지 위험도",\n    style_function=style_func,\n    tooltip=folium.GeoJsonTooltip(fields=[last_property_col], aliases=["위험도:"], localize=True)\n).add_to(m)\nm.fit_bounds(layer.get_bounds())\n\n# ---- 텍스트 마커(위험도 수치)는 색상 표시가 켜져 있을 때만 추가 ----\nif use_color:\n    for idx, row in gdf.iterrows():\n        value = row[last_property_col]\n        try:\n            value_disp = round(float(value), 2)\n        except:\n            value_disp = value\n        centroid = row["geometry"].centroid\n        icon = DivIcon(\n            icon_size=(60, 20),\n            icon_anchor=(30, 10),\n            html=f"<div style=\'font-size: 15pt; color: white; font-weight: bold; text-shadow: 2px 2px 4px black; z-index: 1000;\'>{value_disp}</div>"\n        )\n        folium.Marker(location=[centroid.y, centroid.x], icon=icon).add_to(m)\n\n# --- 버퍼 분석 레이어 추가 (체크박스 선택 시) ---\nif show_buffer:\n    try:\n        buffer_gdf = gpd.read_file(buffer_geojson_path)\n        if buffer_gdf.crs is not None and buffer_gdf.crs.to_string() != "EPSG:4326":\n            buffer_gdf = buffer_gdf.to_crs(epsg=4326)\n        buffer_layer = folium.GeoJson(\n            data=buffer_gdf.to_json(),\n            name="버퍼 분석",\n            style_function=lambda feature: {\n                "fillColor": "#3388ff",\n                "color": "#3388ff",\n                "weight": 2,\n                "fillOpacity": 0.2\n            },\n            tooltip=folium.GeoJsonTooltip(fields=[], aliases=[], localize=True)\n        )\n        buffer_layer.add_to(m)\n    except Exception as e:\n        st.error(f"버퍼 분석 GeoJSON 파일을 읽는 중 오류 발생: {e}")\n\n# ---- folium LayerControl 추가 ----\nfolium.LayerControl().add_to(m)\n\n# --- GPT 구역별 요약 기능 ---\ndf_csv = pd.read_csv(csv_path, encoding="utf-8")\n\noutput = st_folium(m, use_container_width=True, height=700)\n\nclicked_id = None\nif output and output.get("last_active_drawing"):\n    props = output["last_active_drawing"]["properties"]\n    clicked_id = props.get("id")\n\nif clicked_id is not None:\n    row = df_csv[df_csv["id"] == int(clicked_id)]\n    if not row.empty:\n        row = row.iloc[0]\n        prompt = f"""\n        당신은 산업단지 내 구역별 위험요인을 보고 분석하는 유능한 데이터 분석가입니다.\n        다음은 {selected_area} {clicked_id}번 구역의 위험요인 분석 결과입니다.\n        - 위험물회사개수: {row[\'위험물회사개수\']}\n        - 건물밀도: {row[\'건물밀도\']}\n        - 노후건물비율: {row[\'노후건물비율\']}\n        - 위험시설물: {row[\'위험시설물\']}\n        - 소방차접근성: {row[\'소방차접근성\']}\n        - 소방용수시설: {row[\'소방용수시설\']}\n        - 소방서및119안전센터: {row[\'소방서및119안전센터\']}\n        - 최종스코어링(위험도): {row[\'최종스코어링\']}\n\n        위 수치들은 각 구역별 위험도를 측정할 때 사용된 feature와 위험 수준 분류 결과입니다.\n        각 클래스 분류는 5가지로 나뉘며 5가 가장 큰 (가장 위험한) 값이고, 1이 가장 작은 (가장 안전한) 값으로 분류되어 있습니다.\n        강조하지만 이는 개수가 아닌 위험 수준입니다.\n        각 feature의 특성과 클래스 분류 값을 고려하여 각 구역별 위험도 분석을 진행하려 합니다.\n        모든 feature를 고려한 최종 분석 결과를 전문성있고 정확하게 작성하며, 1~2 줄로 요약해주세요.\n        이 때, 생성되는 요약문에는 수치를 제시하지말고 이에 따른 결과를 제시해주세요. 예를 들어, 위험 수준이 5라면 "매우 높음", 4는 "높음", 3은 "보통", 2는 "낮음", 1은 "매우 낮음"입니다.\n        중요한 특성 (위험 수준이 높은)을 더 집중적으로 분석해주세요.\n        """\n        if st.button(f"🔥 구역 {clicked_id} 화재 위험도 요약"):\n            with st.spinner(f"구역 {clicked_id} AI 분석 결과 생성 중..."):\n                response = client.chat.completions.create(\n                    model="gpt-4o-mini",\n                    messages=[{"role": "user", "content": prompt}],\n                    max_tokens=300,\n                    temperature=0.7\n                )\n                summary = response.choices[0].message.content.strip()\n            st.markdown("#### 📋 화재 위험도 요약 결과")\n            st.success(summary)\n    else:\n        st.info("CSV에서 해당 구역의 위험요인 데이터를 찾을 수 없습니다.")\n''')


# # ngrok 토큰 가져오기

# In[2]:

import os
os.system('ngrok config my_token')


# # 서버 실행

# In[3]:


from pyngrok import ngrok
import subprocess
import time
import requests

# 1. Streamlit 실행 (Jupyter 외부에서 실행할 때)
subprocess.Popen(["streamlit", "run", "app.py", "--server.port=8502"])

# 2. ngrok 연결
subprocess.Popen(["ngrok", "http", "8502"])

time.sleep(5)

# ngrok URL 가져오기
try:
    res = requests.get("http://localhost:4040/api/tunnels")
    tunnels = res.json()["tunnels"]
    public_url = tunnels[0]["public_url"]
    print("✅ ngrok URL:", public_url)
except Exception as e:
    print("❌ ngrok URL 가져오기 실패:", e)
